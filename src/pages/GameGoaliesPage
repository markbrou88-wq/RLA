import React from "react";
import { useParams, Link } from "react-router-dom";
import { supabase } from "../supabaseClient.js";

function mmssToSeconds(v) {
  if (!v) return 0;
  const [m = "0", s = "0"] = String(v).split(":");
  return (parseInt(m, 10) || 0) * 60 + (parseInt(s, 10) || 0);
}
function secondsToMMSS(sec) {
  const s = Math.max(0, parseInt(sec || 0, 10));
  const m = Math.floor(s / 60);
  const r = s % 60;
  return `${m}:${String(r).padStart(2, "0")}`;
}

function TeamGoalieEditor({ title, team, players, rows, setRows }) {
  const addRow = () => setRows((prev) => [...prev, {
    player_id: "", started: false, mmss: "", sa: "", ga: "", decision: "ND", shutout: false
  }]);
  const update = (idx, patch) =>
    setRows((prev) => prev.map((r, i) => (i === idx ? { ...r, ...patch } : r)));
  const remove = (idx) =>
    setRows((prev) => prev.filter((_, i) => i !== idx));

  return (
    <div style={{ border: "1px solid #eee", borderRadius: 8, padding: 12 }}>
      <h3 style={{ marginTop: 0 }}>{title}</h3>
      <div style={{ display: "grid", gridTemplateColumns: "1fr 62px 62px 62px 84px 84px 60px", gap: 8, alignItems: "center", fontSize: 14, marginBottom: 6, opacity: .6 }}>
        <div>Goalie</div><div>Start</div><div>SA</div><div>GA</div><div>TOI (mm:ss)</div><div>Decision</div><div>SO</div>
      </div>
      {rows.map((r, i) => (
        <div key={i} style={{ display: "grid", gridTemplateColumns: "1fr 62px 62px 62px 84px 84px 60px auto", gap: 8, alignItems: "center", marginBottom: 6 }}>
          <select value={r.player_id} onChange={(e)=>update(i,{player_id:Number(e.target.value)})}>
            <option value="">Select goalie…</option>
            {players.map(p=>(
              <option key={p.id} value={p.id}>{p.number ? `#${p.number} ` : ""}{p.name}</option>
            ))}
          </select>
          <input type="checkbox" checked={r.started} onChange={(e)=>update(i,{started:e.target.checked})}/>
          <input inputMode="numeric" value={r.sa} onChange={(e)=>update(i,{sa:e.target.value.replace(/\D/g,"")})}/>
          <input inputMode="numeric" value={r.ga} onChange={(e)=>update(i,{ga:e.target.value.replace(/\D/g,"")})}/>
          <input placeholder="mm:ss" value={r.mmss} onChange={(e)=>update(i,{mmss:e.target.value})}/>
          <select value={r.decision} onChange={(e)=>update(i,{decision:e.target.value})}>
            {["ND","W","L","OTL","SOL"].map(d=><option key={d} value={d}>{d}</option>)}
          </select>
          <input type="checkbox" checked={r.shutout} onChange={(e)=>update(i,{shutout:e.target.checked})}/>
          <button onClick={()=>remove(i)}>Remove</button>
        </div>
      ))}
      <button onClick={addRow}>Add Goalie Line</button>
    </div>
  );
}

export default function GameGoaliesPage() {
  const { slug } = useParams();
  const [loading, setLoading] = React.useState(true);
  const [saving, setSaving] = React.useState(false);
  const [user, setUser] = React.useState(null);

  const [game, setGame] = React.useState(null);
  const [homePlayers, setHomePlayers] = React.useState([]);
  const [awayPlayers, setAwayPlayers] = React.useState([]);

  const [homeLines, setHomeLines] = React.useState([]);
  const [awayLines, setAwayLines] = React.useState([]);

  React.useEffect(() => {
    supabase.auth.getUser().then(({ data }) => setUser(data.user || null));
    const { data: sub } = supabase.auth.onAuthStateChange((_e, session) => {
      setUser(session?.user ?? null);
    });
    return () => sub.subscription.unsubscribe();
  }, []);

  const load = React.useCallback(async () => {
    setLoading(true);

    const { data: g, error: ge } = await supabase
      .from("games")
      .select(`
        id, slug, game_date, status,
        home_team:teams!games_home_team_id_fkey ( id, name, short_name, logo_url ),
        away_team:teams!games_away_team_id_fkey ( id, name, short_name, logo_url )
      `)
      .eq("slug", slug)
      .maybeSingle();
    if (ge || !g) { alert(ge?.message || "Game not found"); setLoading(false); return; }
    setGame(g);

    // roster candidates (prefer position G first)
    const plSel = "id, name, number, position";
    const homeQ = supabase.from("players").select(plSel).eq("team_id", g.home_team.id);
    const awayQ = supabase.from("players").select(plSel).eq("team_id", g.away_team.id);
    const [{ data: hp }, { data: ap }] = await Promise.all([homeQ, awayQ]);

    const sortGoalies = (arr) =>
      [...(arr||[])].sort((a,b)=>{
        const ag = (a.position||"") === "G" ? 0 : 1;
        const bg = (b.position||"") === "G" ? 0 : 1;
        if (ag !== bg) return ag - bg;
        const an = a.number ?? 9999, bn = b.number ?? 9999;
        if (an !== bn) return an - bn;
        return (a.name||"").localeCompare(b.name||"");
      });

    setHomePlayers(sortGoalies(hp||[]));
    setAwayPlayers(sortGoalies(ap||[]));

    // existing game_goalies → form rows
    const { data: gg } = await supabase
      .from("game_goalies")
      .select("player_id, team_id, started, minutes_seconds, shots_against, goals_against, decision, shutout")
      .eq("game_id", g.id);

    const toRows = (teamId) =>
      (gg||[])
        .filter(x=>x.team_id===teamId)
        .map(x=>({
          player_id: x.player_id,
          started: x.started,
          mmss: secondsToMMSS(x.minutes_seconds),
          sa: String(x.shots_against),
          ga: String(x.goals_against),
          decision: x.decision,
          shutout: x.shutout
        }));

    setHomeLines(toRows(g.home_team.id));
    setAwayLines(toRows(g.away_team.id));

    setLoading(false);
  }, [slug]);

  React.useEffect(()=>{ load(); },[load]);

  const save = async () => {
    if (!user) { alert("Sign in to edit."); return; }
    setSaving(true);

    const pack = (rows, teamId) =>
      rows
        .filter(r => r.player_id)
        .map(r => ({
          game_id: game.id,
          team_id: teamId,
          player_id: Number(r.player_id),
          started: !!r.started,
          minutes_seconds: mmssToSeconds(r.mmss),
          shots_against: parseInt(r.sa || 0, 10),
          goals_against: parseInt(r.ga || 0, 10),
          decision: r.decision || 'ND',
          shutout: !!r.shutout
        }));

    const upserts = [
      ...pack(homeLines, game.home_team.id),
      ...pack(awayLines, game.away_team.id),
    ];

    // read current to compute deletions
    const { data: current } = await supabase
      .from("game_goalies")
      .select("player_id, team_id")
      .eq("game_id", game.id);

    const desiredKeys = new Set(upserts.map(r=>`${r.player_id}:${r.team_id}`));
    const toDelete = (current||[]).filter(r => !desiredKeys.has(`${r.player_id}:${r.team_id}`));

    if (upserts.length) {
      const { error } = await supabase.from("game_goalies").upsert(upserts, {
        onConflict: "game_id,player_id",
        ignoreDuplicates: false
      });
      if (error) { alert(error.message); setSaving(false); return; }
    }

    if (toDelete.length) {
      const ids = toDelete.map(r=>r.player_id);
      const { error } = await supabase
        .from("game_goalies")
        .delete()
        .eq("game_id", game.id)
        .in("player_id", ids);
      if (error) { alert(error.message); setSaving(false); return; }
    }

    setSaving(false);
    alert("Goalie lines saved.");
  };

  if (loading) return <div style={{ padding:16 }}>Loading…</div>;
  if (!game) return null;

  const home = game.home_team, away = game.away_team;

  return (
    <div style={{ padding: 16 }}>
      <div style={{ display:"flex", alignItems:"center", justifyContent:"space-between", marginBottom:12 }}>
        <div>
          <Link to="/games" style={{ textDecoration:"none" }}>← Back to Games</Link>
          <h2 style={{ margin: "4px 0 0" }}>
            Goalies — {home.short_name || home.name} vs {away.short_name || away.name}
          </h2>
          <div style={{ color:"#666" }}>{new Date(game.game_date).toLocaleDateString()}</div>
        </div>
        <div>
          <button onClick={save} disabled={saving || !user}>
            {saving ? "Saving…" : "Save Goalies"}
          </button>
        </div>
      </div>

      <div style={{ display:"grid", gridTemplateColumns:"1fr 1fr", gap:16 }}>
        <TeamGoalieEditor
          title={`${home.short_name || home.name} (Home)`}
          team={home}
          players={homePlayers}
          rows={homeLines}
          setRows={setHomeLines}
        />
        <TeamGoalieEditor
          title={`${away.short_name || away.name} (Away)`}
          team={away}
          players={awayPlayers}
          rows={awayLines}
          setRows={setAwayLines}
        />
      </div>
    </div>
  );
}
